#pragma once

extern int 运算次数;

struct MapInfo 
{
    int 大;
    int 小;
    int X;
    int Y;
};

const std::map<ULONG64, MapInfo> 地图信息 = {
    {9501, {38, 2, 499, 249}},
    {9507, {38, 2, 499, 249}},
    {9502, {38, 2, 499, 249}},
    {9503, {40, 7, 644, 183}},
    {9504, {40, 7, 644, 183}},
    {9511, {40, 7, 644, 183}},
    {9512, {40, 4, 689, 315}},
    {9513, {41, 2, 657, 223}},
    {9514, {41, 2, 657, 223}},
    {9533, {42, 3, 663, 201}},
    {9534, {42, 3, 663, 201}},
    {9561, {39, 5, 385, 285}},
    {9562, {39, 5, 385, 285}},
    {9563, {39, 5, 385, 285}},
    {9531, {43, 1, 730, 444}},
    {9532, {43, 1, 730, 444}},
    {9572, {6, 1, 639, 230}},
    {9573, {6, 1, 639, 230}},
    {9574, {6, 1, 639, 230}},
    {9524, {9, 1, 623, 272}},
    {9525, {9, 1, 623, 272}},
    {9526, {9, 1, 623, 272}},
    {9551, {12, 0, 555, 298}},
    {9552, {12, 0, 555, 298}},
    {9553, {12, 0, 555, 298}},
    {9554, {12, 0, 555, 298}},
    {9555, {14, 2, 480, 265}},
    {9556, {14, 2, 480, 265}},
    {9505, {20, 2, 717, 357}},
    {9506, {20, 2, 717, 357}},
    {9591, {22, 2, 550, 342}},
    {9592, {22, 2, 550, 342}},
    {9593, {22, 2, 550, 342}},
    {9594, {22, 4, 700, 320}},
    {9557, {22, 4, 700, 320}},
    {9558, {22, 4, 700, 320}},
    {100003945, {31, 2, 650, 340}},
    {100003946, {31, 2, 650, 340}},
    {100003940, {54, 2, 560, 190}},
    {100003941, {54, 2, 560, 190}},
    {100003944, {54, 2, 560, 190}},
    {9541, {35, 2, 690, 300}},
    {100003016, {6, 5, 400, 260}},
    {100003017, {6, 5, 400, 260}},
    {100003018, {80, 1, 410, 210}},
    {100003019, {80, 1, 410, 210}},
    {100003421, {80, 3, 400, 200}},
    {100003422, {97, 0, 790, 300}},
    {100003423, {143, 0, 570, 340}},
    {100003424, {137, 1, 500, 280}},
    {100003425, {22, 2, 600, 300}},
    {100003426, {156, 1, 780, 338}},
    {100003427, {156, 1, 780, 338}},
    {100003428, {156, 1, 780, 338}},
    {100003429, {166, 1, 920, 130}}
};

void 跟随遍历();

void 跟随BOSS();

void 倍攻();

void 钩子();

int 获取地图编号(ULONG64 角色等级);

MapInfo 获取地图信息(ULONG64 地图编号);

void 对话框处理();

void 按键处理();

void 拾取遍历();

void 地图遍历();

void 跟随未央柱子();

void ReleaseMemory();

void 自用对话框();//ESC键和空格键

void 自用拾取();
